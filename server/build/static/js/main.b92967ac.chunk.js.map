{"version":3,"sources":["components/Home.js","components/LesProps.js","components/Joueur.js","components/Stades.js","components/Ajout.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","handleChange","e","target","setState","name","value","handleSubmit","fetch","method","headers","body","JSON","stringify","equipes","state","postes","then","response","history","push","json","data","console","log","success","type","onChange","this","map","equipe","i","key","id_equipe","nom_equipe","poste","id_poste","nom_poste","onClick","React","Component","LesProps","names","Joueur","id","window","confirm","joueurs","location","reload","joueur","nom_joueur","prenom_joueur","numero","date_naissance_joueur","id_joueur","Stades","stades","stade","nom_stade","adresse_stade","cp_stade","pays_stade","Ajout","Navigation","to","App","className","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0TAwFeA,E,kDAnFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,aAAe,SAACC,GACZ,IAAIC,EAASD,EAAEC,OACf,EAAKC,SAAL,eACKD,EAAOE,KAAOF,EAAOG,SAZX,EAkBnBC,aAAe,WACXC,MAAM,mBACN,CAACC,OAAQ,OAAQC,QAAS,CAAC,eAAgB,oBAC3CC,KAAMC,KAAKC,UAAU,CAACC,QAAS,EAAKC,MAAMD,SAAU,CAACE,OAAQ,EAAKD,MAAMC,WACvEC,MAAK,SAACC,GAEH,OADA,EAAKlB,MAAMmB,QAAQC,KAAK,WACjBF,EAASG,UAGnBJ,MAAK,SAACK,GACHC,QAAQC,IAAIF,GACZ,EAAKlB,SAAS,CAACU,QAAUQ,GAAzB,CACCA,EAAKG,aA3BV,EAAKV,MAAQ,CACTD,QAAS,GACTE,OAAQ,IALG,E,gEAkCE,IAAD,OAChBR,MAAM,mBAELS,MAAK,SAACC,GACH,OAAOA,EAASG,UAEnBJ,MAAK,SAACK,GACHC,QAAQC,IAAIF,GACZ,EAAKlB,SAAS,CAACU,QAAUQ,IACrBA,EAAKG,SACL,EAAKzB,MAAMmB,QAAQC,KAAK,QAEhCZ,MAAM,kBACLS,MAAK,SAACC,GACH,OAAOA,EAASG,UAEnBJ,MAAK,SAACK,GACHC,QAAQC,IAAIF,GACZ,EAAKlB,SAAS,CAACY,OAASM,IACpBA,EAAKG,SACL,EAAKzB,MAAMmB,QAAQC,KAAK,U,+BAK1B,IAAD,OACL,OACA,6BACA,oCACI,uCAEI,2BAAOM,KAAK,OAAOrB,KAAK,OACxBsB,SAAUC,KAAK3B,eACf,gCACK2B,KAAKb,MAAMD,QAAQe,KAAI,SAACC,EAAQC,GAC7B,OAAO,4BAAQC,IAAKD,EAAGL,KAAK,OAAOrB,KAAK,UAAUC,MAAOwB,EAAOG,UAAWN,SAAU,EAAK1B,cAAe6B,EAAOI,gBAGxH,gCACKN,KAAKb,MAAMC,OAAOa,KAAI,SAACM,EAAOJ,GAC3B,OAAO,4BAAQC,IAAKD,EAAGL,KAAK,OAAOrB,KAAK,SAASC,MAAQ6B,EAAMC,SAAUT,SAAU,EAAK1B,cAAekC,EAAME,eAGrH,4BAAQX,KAAK,SAASY,QAASV,KAAKrB,cAApC,iB,GA/EGgC,IAAMC,WCoBVC,E,kDAlBX,WAAYzC,GAAQ,IAAD,8BACf,cAAMA,IAEDe,MAAQ,CACT2B,MAAO,IAJI,E,qDAUf,OACA,6BACI,mD,GAdWH,IAAMC,WCmEdG,E,kDAlEX,WAAY3C,GAAQ,IAAD,8BACf,cAAMA,IAQVO,aAAe,SAACqC,GACJC,OAAOC,QAAQ,+CAGnBtC,MAAM,oBAAsBoC,EACpB,CAACnC,OAAQ,SAAUC,QAAS,CAAC,eAAgB,oBAC7CC,KAAMC,KAAKC,UAAU,CAACkC,QAAS,EAAKhC,MAAMgC,YACzC9B,MAAK,SAACC,GAEH,OADA,EAAKlB,MAAMmB,QAAQC,KAAK,WACjBF,EAASG,UAEnBJ,MAAK,SAACK,GACHC,QAAQC,IAAIF,GACZ,EAAKlB,SAAS,CAAC2C,QAAUzB,GAAzB,CACCA,EAAKG,YAIVoB,OAAOG,SAASC,WAxB5B,EAAKlC,MAAQ,CACTgC,QAAS,IAJE,E,gEAiCC,IAAD,OACfvC,MAAM,mBACLS,MAAK,SAACC,GACH,OAAOA,EAASG,UAEnBJ,MAAK,SAACK,GAEH,EAAKlB,SAAS,CAAC2C,QAAUzB,S,+BAKxB,IAAD,OACJ,OACG,6BACC,iDACCM,KAAKb,MAAMgC,QAAQlB,KAAI,SAACqB,EAAQnB,GAC5B,OAAO,yBAAKC,IAAKD,GAAImB,EAAOC,WAArB,KAAmCD,EAAOE,cAA1C,KAA2DF,EAAOG,OAAlE,KAA4EH,EAAOI,sBAC9E,4BACOhB,QAAS,kBACT,EAAK/B,aACD2C,EAAOK,aAHlB,sB,GArDRhB,IAAMC,WCmCZgB,E,kDAjCX,WAAYxD,GAAQ,IAAD,8BACf,cAAMA,IAEDe,MAAQ,CACT0C,OAAQ,IAJG,E,gEAQK,IAAD,OACnBjD,MAAM,mBACLS,MAAK,SAACC,GACH,OAAOA,EAASG,UAEnBJ,MAAK,SAACK,GACHC,QAAQC,IAAIF,GACZ,EAAKlB,SAAS,CAACqD,OAASnC,S,+BAM5B,OACG,6BACC,gDACCM,KAAKb,MAAM0C,OAAO5B,KAAI,SAAC6B,EAAO3B,GAC1B,OAAO,yBAAKC,IAAKD,GAAI2B,EAAMC,UAApB,KAAiCD,EAAME,cAAvC,KAAwDF,EAAMG,SAA9D,KAA0EH,EAAMI,oB,GA3BnFvB,IAAMC,WCuCZuB,E,kDArCX,WAAY/D,GAAQ,IAAD,8BACf,cAAMA,IAEDe,MAAQ,CACT2B,MAAO,IAJI,E,gEAQC,IAAD,OACflC,MAAM,oBACLS,MAAK,SAACC,GACH,OAAOA,EAASG,UAEnBJ,MAAK,SAACK,GACHC,QAAQC,IAAIF,GACZ,EAAKlB,SAAS,CAACsC,MAAQpB,S,+BAc3B,OACG,6BACC,+C,GAjCQiB,IAAMC,WCaXwB,MAXf,WACI,OACI,4BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,cACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,YACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,YCkBDC,MAnBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,IAAD,KACI,kBAAC,EAAD,MACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWvE,IACrC,kBAAC,IAAD,CAAOqE,OAAK,EAACC,KAAK,YAAYC,UAAW7B,IACzC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,UAAUC,UAAW3B,IACvC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,UAAUC,UAAWd,IACvC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,SAASC,UAAWP,SCTlCQ,QACW,cAA7B1B,OAAOG,SAASwB,UAEe,UAA7B3B,OAAOG,SAASwB,UAEhB3B,OAAOG,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.b92967ac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            equipes: [],\r\n            postes: []\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let target = e.target;\r\n        this.setState({\r\n            [target.name]: target.value\r\n        })\r\n    }\r\n\r\n   \r\n    \r\n    handleSubmit = () =>{\r\n        fetch(\"create/newjoueur\",\r\n        {method: 'POST', headers: {'content-type': 'application/json'},\r\n        body: JSON.stringify({equipes: this.state.equipes}, {postes: this.state.postes})})\r\n        .then((response) => {\r\n            this.props.history.push('/joueur');\r\n            return response.json();\r\n            \r\n        })\r\n        .then((data) => {\r\n            console.log(data)\r\n            this.setState({equipes : data})\r\n            (data.success)\r\n        })\r\n    }\r\n\r\n    componentDidMount (){\r\n        fetch(\"read/allequipes\") \r\n       \r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            console.log(data)\r\n            this.setState({equipes : data})\r\n            if (data.success)\r\n                this.props.history.push('/');\r\n        })\r\n        fetch(\"read/allpostes\")\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            console.log(data)\r\n            this.setState({postes : data})\r\n            if (data.success)\r\n                this.props.history.push('/');\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n        <h2>Home</h2>\r\n            <label>\r\n                Nom : \r\n                <input type=\"text\" name=\"name\" //value={this.state.name} // \r\n                onChange={this.handleChange} />\r\n                <select>\r\n                    {this.state.equipes.map((equipe, i) => {\r\n                        return <option key={i} type=\"text\" name=\"equipes\" value={equipe.id_equipe} onChange={this.handleChange}>{equipe.nom_equipe}</option>   \r\n                    })}\r\n                </select>\r\n                <select>\r\n                    {this.state.postes.map((poste, i) => {\r\n                        return <option key={i} type=\"text\" name=\"postes\" value= {poste.id_poste} onChange={this.handleChange}>{poste.nom_poste}</option>   \r\n                    })}\r\n                </select>\r\n                <button type=\"button\" onClick={this.handleSubmit}>Envoyer</button>\r\n            </label>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Home;","import React from 'react';\r\n\r\n\r\nclass LesProps extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            names: []\r\n        }\r\n    }\r\n\r\n    \r\nrender(){\r\n        return(\r\n        <div>\r\n            <h2>Page des Props</h2>\r\n        </div>\r\n        )\r\n\r\n    }\r\n}\r\nexport default LesProps;","import React from 'react';\r\n\r\nclass Joueur extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            joueurs: []\r\n        }\r\n    }\r\n\r\n    \r\n    handleSubmit = (id) =>{\r\n        let d = window.confirm(\"Voulez-vous vraiment supprimer ce joueur?\")\r\n        // let b = window.location.reload(true);\r\n        if(d) {\r\n            fetch(\"delete/deljoueur/\" + id,\r\n                    {method: 'DELETE', headers: {'content-type': 'application/json'},\r\n                    body: JSON.stringify({joueurs: this.state.joueurs})})\r\n                    .then((response) => {\r\n                        this.props.history.push('/joueur');\r\n                        return response.json();\r\n                    })\r\n                    .then((data) => {\r\n                        console.log(data)\r\n                        this.setState({joueurs : data})\r\n                        (data.success)\r\n                        \r\n                    })\r\n                    //recharger ma page apres suppression\r\n                    window.location.reload();       \r\n                }\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount(){\r\n        fetch(\"read/alljoueurs\")\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            // console.log(data)\r\n            this.setState({joueurs : data})\r\n        })\r\n    }\r\n    \r\n        \r\n    render(){\r\n        return(\r\n           <div>\r\n            <h2>Liste des Joueurs</h2>\r\n            {this.state.joueurs.map((joueur, i) => {\r\n                 return <div key={i}>{joueur.nom_joueur}, {joueur.prenom_joueur}, {joueur.numero}, {joueur.date_naissance_joueur}\r\n                             <button\r\n                                    onClick={() =>\r\n                                    this.handleSubmit(\r\n                                        joueur.id_joueur\r\n                                        // joueur.prenom_joueur,\r\n                                        // joueur.nom_joueur\r\n                                    )}>\r\n                                        Supprimer\r\n                                </button>\r\n                        </div>\r\n                })}\r\n          </div>\r\n        )\r\n    }\r\n}\r\nexport default Joueur;","import React from 'react';\r\n\r\nclass Stades extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stades: []\r\n        }\r\n    }\r\n\r\n        componentDidMount(){\r\n        fetch(\"read/allstadium\")\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            console.log(data)\r\n            this.setState({stades : data})\r\n            \r\n        })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n           <div>\r\n            <h2>Liste des Stades</h2>\r\n            {this.state.stades.map((stade, i) => {\r\n                 return <div key={i}>{stade.nom_stade}, {stade.adresse_stade}, {stade.cp_stade}, {stade.pays_stade}</div>\r\n            })}\r\n          </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\nexport default Stades;","import React from 'react';\r\n\r\nclass Ajout extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            names: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"create/newjoueur\")\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            console.log(data)\r\n            this.setState({names : data})\r\n            \r\n        })\r\n    }\r\n    \r\n    \r\n    // handleChange = (e) => {\r\n    //     let target = e.target;\r\n    //     this.setState({\r\n    //         [target.name]: target.value\r\n    //     })\r\n    // }\r\n\r\n    render(){\r\n        return(\r\n           <div>\r\n            <h2>Page Ajout</h2>\r\n          </div>\r\n        )\r\n\r\n    }\r\n}\r\nexport default Ajout;","import React from 'react';\r\nimport {BrowserRouter as Router, Link, Route, Switch} from 'react-router-dom';\r\n\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <ul>\r\n            <li><Link to='/home'>Home</Link></li>\r\n            <li><Link to='/lesprops'>Les Props</Link></li>\r\n            <li><Link to='/joueur'>Joueurs</Link></li>\r\n            <li><Link to='/stades'>Stades</Link></li>\r\n            <li><Link to='/ajout'>Ajout</Link></li>\r\n        </ul>\r\n    )\r\n}\r\nexport default Navigation;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Link, Route, Switch} from 'react-router-dom';\nimport Home from './components/Home';\nimport LesProps from './components/LesProps';\nimport Joueur from './components/Joueur';\nimport Stades from './components/Stades';\nimport Ajout from './components/Ajout';\nimport Navigation from './components/Navigation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Router>\n          <Navigation />\n            <Switch>\n                <Route exact path='/home' component={Home} />\n                <Route exact path='/lesprops' component={LesProps} />\n                <Route exact path='/joueur' component={Joueur} />\n                <Route exact path='/stades' component={Stades} />\n                <Route exact path='/ajout' component={Ajout} />\n            </Switch>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}